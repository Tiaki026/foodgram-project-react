from django.contrib import admin
from django.utils.html import format_html

from .models import (AmountRecipeIngredients, Favorite, Ingredient, Recipe,
                     ShoppingCart, Tag)


def tag_color(tag: Tag):
    """–ü—Ä–µ–≤—å—é —Ü–≤–µ—Ç–∞ —Ç–µ–≥–æ–≤."""
    color_map = {
        'breakfast': 'üü†',
        'dinner': 'üü¢',
        'evening meal': 'üü£',
    }

    return f'{tag.name} {color_map.get(tag.slug, "")}'


@admin.register(AmountRecipeIngredients)
class AmountRecipeIngredientsAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å–≤—Ç–∞ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤."""

    fields = ['recipe', 'ingredients', 'amount']


class AmountRecipeIngredientsInline(admin.TabularInline):
    """–ö–ª–∞—Å—Å —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤."""

    model = AmountRecipeIngredients
    extra = 1
    min_num = 1


@admin.register(Recipe)
class RecipeAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤."""

    list_display = [
        'name', 'id', 'author', 'pub_date',
        'color_preview', 'is_favorited', 'is_image',
    ]
    list_filter = ['author', 'name', 'tags']
    search_fields = ['author__username', 'name', 'tags__name']
    raw_id_fields = ['author']
    inlines = [AmountRecipeIngredientsInline]
    fields = [
        'name', 'author', 'tags', 'image',
        'text', 'cooking_time'
    ]

    @admin.display(description='–ò–∑–±—Ä–∞–Ω–Ω–æ–µ')
    def is_favorited(self, obj: Recipe) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.

        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –∏ –≤—ã–¥–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å–≤—Ç–æ.
        """
        count = obj.in_favorited.count()
        if count > 0:
            return f'{count} ‚≠êÔ∏è'

    @admin.display(description='–ö–∞—Ä—Ç–∏–Ω–∫–∞')
    def is_image(self, obj: Recipe):
        """–ü—Ä–µ–≤—å—é –∫–∞—Ä—Ç–∏–Ω–∫–∏."""
        if obj.image:
            return format_html(
                '<img src="{}" style="max-height: 90px; max-width: 90px;" />',
                obj.image.url
            )
        else:
            return '–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'

    @admin.display(description='–¢–µ–≥–∏')
    def color_preview(self, obj: Recipe):
        """–¶–≤–µ—Ç —Ç–µ–≥–∞ –≤ —Ä–µ—Ü–µ–ø—Ç–∞—Ö."""
        tags = obj.tags.all()
        return ', '.join([tag_color(tag) for tag in tags])


@admin.register(Ingredient)
class IngredientAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤."""

    list_display = ['name', 'measurement_unit']
    list_filter = ['name']
    search_fields = ['name']


@admin.register(Tag)
class TagAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–≥–æ–≤."""

    list_display = ['name', 'color', 'color_preview', 'slug']
    search_fields = ['name']
    prepopulated_fields = {'slug': ['name']}

    @admin.display(description='–¶–≤–µ—Ç —Ç–µ–≥–∞')
    def color_preview(self, obj: Tag):
        """–¶–≤–µ—Ç —Ç–µ–≥–∞."""
        return tag_color(obj)


@admin.register(ShoppingCart)
class ShoppingCartAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫."""

    list_display = ['user', 'recipe']


@admin.register(Favorite)
class FavoriteAdmin(admin.ModelAdmin):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤."""

    list_display = ['user', 'recipe']
    search_fields = ['user__username', 'recipe__name']
